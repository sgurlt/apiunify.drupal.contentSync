<?php

/**
 * @file
 * Module file for drupal_content_sync.
 */

use Drupal\Core\Render\RenderContext;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FieldItemInterface;
use Drupal\file\Entity\File;

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function drupal_content_sync_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  _drupal_content_sync_form_alter_disabled_fields($form, $form_state, $form_id);
  _drupal_content_sync_form_alter_override_webhook_events($form, $form_state, $form_id);
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function _drupal_content_sync_form_alter_override_webhook_events(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (0 !== strpos($form_id, 'webhook_config')) {
    return;
  }

  $entity_types = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  $field_map = \Drupal::service('entity_field.manager')->getFieldMap();

  $form['events']['#options'] = [];

  foreach ($entity_types as $type_key => $entity_type) {
    // This entity type hasn't contained any fields.
    if (!isset($field_map[$type_key])) {
      continue;
    }

    $readableTypeName = str_replace('_', ' ', ucfirst($type_key));

    $options = [
      sprintf('entity:%s:create', $type_key) => [
        'type' => $readableTypeName,
        'event' => 'Create',
      ],
      sprintf('entity:%s:update', $type_key) => [
        'type' => $readableTypeName,
        'event' => 'Update',
      ],
      sprintf('entity:%s:delete', $type_key) => [
        'type' => $readableTypeName,
        'event' => 'Delete',
      ]
    ];

    $form['events']['#options'] += $options;
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function _drupal_content_sync_form_alter_disabled_fields(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form_object = $form_state
    ->getFormObject();

  if (!($form_object instanceof \Drupal\Core\Entity\ContentEntityForm)) {
    return;
  }

  $entity = $form_object
    ->getEntity();

  $fields_list = $entity
    ->getFields();

  $fields_list_keys = array_keys($fields_list);

  if (in_array('field_drupal_content_synced', $fields_list_keys)) {
    $drupal_content_synched_value = $entity->get('field_drupal_content_synced')->getValue();
    $field_drupal_content_synce_value = reset($drupal_content_synched_value);

    if (isset($field_drupal_content_synce_value['value']) && '1' === $field_drupal_content_synce_value['value']) {
      foreach ($form as $key => $form_item) {
        if (0 === strpos($key, 'field_') || (is_array($form_item) && isset($form_item['#type']) && 'container' === $form_item['#type'])) {
          $form[$key]['#disabled'] = TRUE;
        }
      }

      drupal_set_message(t('The entity cannot be edited because it has been synced.'), 'warning');
    }
  }
}

/**
 * Implements hook_theme().
 * @return array
 */
function drupal_content_sync_theme() {
  $theme['drupal_content_sync_content_dashboard'] = [
    'variables' => ['configuration' => NULL],
    'template' => 'drupal_content_sync_content_dashboard'
  ];

  return $theme;
}

function _drupal_content_sync_preprocess_entity($original, $entity_type, $bundle, $site_id = '', $file_content = false, $translation = false) {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');
  $field_definitions = $entityFieldManager->getFieldDefinitions($entity_type, $bundle);
  $entityTypeManager = \Drupal::entityTypeManager();

  $entity = [
    'embed_entities' => [],
  ];

  $fields_to_ignore = ['type', 'path', 'field_drupal_content_synced', 'nid', 'vid', 'thumbnail'];

  foreach($original as $field_name => $field_value) {
    if (empty($field_definitions[$field_name]) || in_array($field_name, $fields_to_ignore) || empty($field_value)) {
      continue;
    }

    $field_definition = $field_definitions[$field_name];
    if ($field_value instanceof FieldItemListInterface || $field_value instanceof FieldItemInterface) {
      $field_value = $field_value->getValue();
    }

    switch ($field_definition->getType()) {
      case 'entity_reference_revisions':
      case 'entity_reference':
        foreach ($field_value as $key => $value) {
          if (empty($value['target_id'])) {
            break;
          }

          $target_id = $value['target_id'];
          $reference_type = $field_definition->getFieldStorageDefinition()->getPropertyDefinition('entity')->getTargetDefinition()->getEntityTypeId();

          $reference = $entityTypeManager->getStorage($reference_type)->load($target_id);
          if ($reference && $reference->uuid() != $entity['uuid']) {
            $uuid = $reference->uuid();

            $entity[$field_name][$key]['id'] = $target_id;
            $entity[$field_name][$key]['connection_id'] = 'drupal_pool_' . $reference->bundle();
            $entity[$field_name][$key]['type'] = $reference->getEntityTypeId();
            $entity[$field_name][$key]['uuid'] = $uuid;

            if ($entity_type != 'field_collection_item') {
              $entity['embed_entities'][$uuid] = [
                'uuid' => $uuid,
                'connection_id' => $entity[$field_name][$key]['connection_id'],
                'type' => $entity[$field_name][$key]['type'],
              ];
            }
          }
        }
        break;

      case 'file':
      case 'image':
        foreach ($field_value as $key => $value) {
          $file = File::load($value['target_id']);
          if ($file) {
            $uri = $file->getFileUri();
            $entity[$field_name][$key] = $value;
            $entity[$field_name][$key]['file_content'] = base64_encode(file_get_contents($uri));
            $entity[$field_name][$key]['file_uri'] = $uri;
            $entity[$field_name][$key]['file_name'] = $file->getFilename();
          }
        }
        break;

      case 'field_collection':
        $entity[$field_name] = [];
//        TODO: Uncomment and finish code below
//        foreach ($field_value as $key => $value) {
//          /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item */
//          $field_collection_item = $value['field_collection_item'];
//          if (!$field_collection_item && !empty($value['value'])) {
//            $field_collection_item = \Drupal\field_collection\Entity\FieldCollectionItem::load($value['value']);
//            if (!$field_collection_item) {
//              continue;
//            }
//          }
//          else {
//            continue;
//          }
//
//          $field_collection_bundle = $field_collection_item->bundle();
//          $field_collection_type = $field_collection_item->getEntityTypeId();
//
//          $entity[$field_name][$key] = _drupal_content_sync_preprocess_entity($field_collection_item, $field_collection_type, $field_collection_bundle, $site_id, $file_content, $translation);
//          $entity[$field_name][$key]['type'] = $field_collection_bundle;
//
//          $entity['embed_entities'] = array_merge($entity['embed_entities'], $entity[$field_name][$key]['embed_entities']);
//          unset($entity[$field_name][$key]['embed_entities']);
//        }
        break;

      default:
        $entity[$field_name] = $field_value;

        if (is_array($field_value)) {
          switch ($field_name) {
            case 'title':
            case 'uuid':
              $entity[$field_name] = reset($field_value)['value'];
              break;

            case 'created':
            case 'changed':
              $entity[$field_name] = (int) reset($field_value)['value'];
              break;
          }
        }
        break;
    }
  }

  $entity['id'] = $entity['uuid'];

  if (is_array($original)) {
    $query = \Drupal::entityQuery($entity_type);

    $entity_type_entity = \Drupal::entityTypeManager()
      ->getStorage($entity_type)->getEntityType();
    if ($bundle_field = $entity_type_entity->getKey('bundle')) {
      $query->condition($bundle_field, $bundle);
    }
    $query->condition('uuid', $entity['uuid']);
    $entity_ids = array_values($query->execute());
    $entities = array_values(\Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple($entity_ids));
    $original = array_shift($entities);
  }

  $view_builder = $entityTypeManager->getViewBuilder($entity_type);
  $preview = $view_builder->view($original, 'drupal_content_sync_preview');
  $rendered = \Drupal::service('renderer');
  $html = $rendered->executeInRenderContext(
    new RenderContext(),
    function () use ($rendered, $preview) {
      return $rendered->render($preview);
    }
  );
  $entity['preview'] = $html;

  if ($original->hasLinkTemplate('canonical')) {
    $entity['url'] = $original->toUrl('canonical', ['absolute' => TRUE])
      ->toString(TRUE)
      ->getGeneratedUrl();
  }

  if ($entity_type == 'file' && $file_content) {
    if (method_exists($original, 'getFileUri')) {
      $uri = $original->getFileUri();
      $entity['apiu_file_content'] = base64_encode(file_get_contents($uri));
      $entity['preview'] = '<img style="max-height: 200px" src="'.file_create_url($uri).'"/>';
    }
    $entity['title'] = $original->getFilename();
  }

  // field_collection_item throws some exception when label() function is triggered.
  if (empty($entity['title']) && $entity_type != 'field_collection_item') {
    $entity['title'] = $original->label();
  }

  if (empty($entity['created']) && !empty($entity['changed'])) {
    $entity['created'] = $entity['changed'];
  }

  if (!$translation && method_exists($original, 'getTranslationLanguages') && method_exists($original, 'getTranslation')) {
    $translations = array_keys($original->getTranslationLanguages(false));
    foreach ($translations as $t) {
      $entity['apiu_translation'][$t] = _drupal_content_sync_preprocess_entity($original->getTranslation($t), $entity_type, $bundle, $site_id, $file_content, TRUE);
    }
  }

  \Drupal::moduleHandler()->alter('drupal_content_sync_preprocess_entity', $entity, $original, $site_id);
  if ($entity['embed_entities']) {
    $entity['embed_entities'] = array_values($entity['embed_entities']);
  }

  return $entity;
}
